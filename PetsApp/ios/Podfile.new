require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

platform :ios, '11.0'

target 'Chatbot' do
  config = use_native_modules!

  # If you're working from a fresh checkout without node_modules, use the
  # local copy of third-party podspecs so CocoaPods can fetch boost reliably
  # without modifying node_modules. This avoids checksum/extraction issues
  # caused by some upstream mirrors.
  # local_boost_pod = File.join(__dir__, 'third-party-podspecs', 'boost.podspec')
  # rn_boost_pod = File.join(__dir__, '..', 'node_modules', 'react-native', 'third-party-podspecs', 'boost.podspec')
  # unless File.exist?(rn_boost_pod)
  #   pod 'boost', :path => local_boost_pod
  # else
  #   puts "Using react-native bundled boost podspec: #{rn_boost_pod}"
  # end

  use_react_native!(
    :path => config[:reactNativePath],
    # to enable hermes on iOS, change `false` to `true` and then install pods
    :hermes_enabled => false
  )

  target 'ChatbotTests' do
    inherit! :complete
    # Pods for testing
  end

  # Enables Flipper.
  #
  # Note that if you have use_frameworks! enabled, Flipper will not work and
  # you should disable the next line.
  use_flipper!()

  post_install do |installer|
    react_native_post_install(installer)

    # Ensure all Pods are built with a minimum iOS deployment target of 12.x
    # so APIs used by libc++ (like std::optional::value) are available.
    # installer.pods_project.targets.each do |target|
    #   target.build_configurations.each do |config|
    #     begin
    #       current = config.build_settings['IPHONEOS_DEPLOYMENT_TARGET']
    #       # If not set or lower than 12.0, bump it to 12.4
    #       if current.nil? || current.to_f < 12.0
    #         config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.4'
    #       end
    #     rescue => e
    #       # ignore targets we can't modify
    #     end

    #     # Define this macro so Boost's headers use the typedef-only
    #     # hash_base instead of inheriting from std::unary_function which
    #     # is removed in libc++ when compiling with C++17.
    #     defs = config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
    #     unless defs.any? { |d| d.to_s.include?('BOOST_NO_CXX98_FUNCTION_BASE') }
    #       defs << 'BOOST_NO_CXX98_FUNCTION_BASE=1'
    #     end
    #   end
    # end

    # Apply local patch for Folly Time.h to avoid clockid_t/CLOCK_* collisions
    # This script is idempotent and safe to run multiple times. Use Node for portability.
    # system("$(which node) #{File.join(__dir__, '..', 'scripts', 'patch-folly-time.js')}")
  end
end
